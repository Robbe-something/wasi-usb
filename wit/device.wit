package component:usb@0.2.1;

interface usb {
    use descriptors.{device-descriptor, config-descriptor};
    use types.{speed, duration, device-handle-error, language};
    resource usb-device {
        device-descriptor: func() -> result<device-descriptor>;
        config-descriptor: func() -> result<config-descriptor>;
        bus-number: func() -> u8;
        address: func() -> u8;
        speed: func() -> speed;
        open: func() -> result<device-handle>;
        port-number: func() -> u8;
    }

    resource context {
        devices: func() -> result<list<usb-device>>;
        open-device-with-vid-pid: func(vendor-id: u16, product-id: u16) -> option<device-handle>;
    }

    resource device-handle {
        device: func() -> usb-device;
        active-configuration: func() -> result<u8>;
        set-active-configuration: func(config: u8) -> result;
        unconfigure: func() -> result;
        reset: func() -> result;
        clear-halt: func(endpoint: u8) -> result;
        kernel-driver-active: func() -> result<bool>;
        detach-kernel-driver: func() -> result;
        attach-kernel-driver: func() -> result;
        set-auto-attach-detach-kernel-driver: func(auto: bool) -> result;
        claim-interface: func(iface: u8) -> result;
        release-interface: func(iface: u8) -> result;
        set-interface-alt-setting: func(iface: u8, alt-setting: u8) -> result;
        read-interrupt: func(endpoint: u8, timeout: duration) -> result<tuple<u64, list<u8>>, device-handle-error>;
        write-interrupt: func(endpoint: u8, data: list<u8>, timeout: duration) -> result<u64, device-handle-error>;
        read-bulk: func(endpoint: u8, max-size: u64, timeout: duration) -> result<tuple<u64, list<u8>>, device-handle-error>;
        write-bulk: func(endpoint: u8, data: list<u8>, timeout: duration) -> result<u64, device-handle-error>;
        read-control: func(request-type: u8, request: u8, value: u16, index: u16, max-size: u16, timeout: duration) -> result<tuple<u64, list<u8>>, device-handle-error>;  
        write-control: func(request-type: u8, request: u8, value: u16, index: u16, data: list<u8>, timeout: duration) -> result<u64, device-handle-error>;
        read-languages: func(timeout: duration) -> result<list<language>>;
        read-string-descriptor-ascii: func(index: u8) -> result<string>;
        read-string-descriptor: func(language: language, index: u8, timeout: duration) -> result<string>;
        read-manufacturer-string-ascii: func(device: device-descriptor);
    }
}