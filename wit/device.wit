package component:usb@0.2.0;

interface usb {
    use types.{device-handle-error};
    use descriptors.{configuration-descriptor, device-descriptor};

    type duration = u64;

    resource usb-device {
        // Get a list of all configurations of the USB device.
        configurations: func() -> result<list<configuration-descriptor>, device-handle-error>;

        device-descriptor: func() -> device-descriptor;

        // Open the device. If successfull, this will return a device handle which can be used to interact with the device.
        open: func() -> result<device-handle, device-handle-error>;

        // Get a list of all USB devices the guest is allowed to access.
        enumerate: static func() -> list<usb-device>;
    }

    resource device-handle {
        reset: func() -> result<_, device-handle-error>;
        active-configuration: func() -> result<u8, device-handle-error>;

        select-configuration: func(configuration: u8) -> result<_, device-handle-error>;

        // **Interfaces**

        // Claim an interface.
        // Claiming an interface can fail. For example, the operating system might not allow claiming the interface.
        claim-interface: func(%interface: u8) -> result<_, device-handle-error>;

        // Release an interface.
        release-interface: func(%interface: u8);

        // Select an alternate interface.
        select-alternate-interface: func(%interface: u8, setting: u8) -> result<_, device-handle-error>;

        // **Reading & Writing**

        read-interrupt: func(endpoint: u8, timeout: duration) -> result<tuple<u64, list<u8>>, device-handle-error>;
        write-interrupt: func(endpoint: u8, data: list<u8>, timeout: duration) -> result<u64, device-handle-error>;

        read-bulk: func(endpoint: u8, max-size: u64, timeout: duration) -> result<tuple<u64, list<u8>>, device-handle-error>;
        write-bulk: func(endpoint: u8, data: list<u8>, timeout: duration) -> result<u64, device-handle-error>;

        read-isochronous: func(endpoint: u8, timeout: duration) -> result<tuple<u64, list<u8>>, device-handle-error>;
        write-isochronous: func(endpoint: u8, data: list<u8>, timeout: duration) -> result<u64, device-handle-error>;

        read-control: func(request-type: u8, request: u8, value: u16, index: u16, max-size: u16, timeout: duration) -> result<tuple<u64, list<u8>>, device-handle-error>;
        write-control: func(request-type: u8, request: u8, value: u16, index: u16, buf: list<u8>, timeout: duration) -> result<u64, device-handle-error>;
    }
}
