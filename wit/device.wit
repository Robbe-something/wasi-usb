package component:usb@0.2.1;

interface device {
    // Import the error codes enum from errors.wit
    use errors.{libusb-error};
    use configuration.{config-value};
    use descriptors.{device-descriptor, configuration-descriptor, interface-descriptor, endpoint-descriptor};
    use transfers.{transfer, transfer-type, transfer-setup, transfer-options};

    /// Opaque USB device object (represents a detected USB device).
    resource usb-device {
        /// Open a device and return a handle for I/O operations.
        /// The `device` must be one from the list_devices result.
        /// On success, returns a device-handle for the open device.
        /// Errors: access (permission denied), no_device (device disconnected), etc.
        open: func() -> result<device-handle, libusb-error>;

        // Functions to retrieve descriptors
        // get-device-descriptor: func() -> result<device-descriptor, libusb-error>;
        get-configuration-descriptor: func(config-index: u8) -> result<configuration-descriptor, libusb-error>;
        get-configuration-descriptor-by-value: func(config-value: u8) -> result<configuration-descriptor, libusb-error>;
        // get-interface-descriptor: func(interface-number: u8, alternate-setting: u8) -> result<interface-descriptor, libusb-error>;
        // get-endpoint-descriptor: func(interface-number: u8, endpoint-index: u8) -> result<endpoint-descriptor, libusb-error>;

    }

    /// Opaque handle for an open USB device (for performing I/O).
    resource device-handle {
        /// Get the currently active configuration value of an open device.
        /// On success, returns the bConfigurationValue (0 if unconfigured).
        get-configuration: func() -> result<u8, libusb-error>;

        /// Set the active configuration for a device.
        /// Use ConfigValue.unconfigured to unconfigure (set config 0), or ConfigValue.value(n) to set configuration 'n'.
        /// Returns an error if the device is busy or the configuration is invalid.
        set-configuration: func(config: config-value) -> result<_, libusb-error>;

        /// Claim an iface on a device so it can be used by libusb.
        /// This should prepare the interface for I/O (detach kernel driver if needed, etc.).
        claim-interface: func(ifac: u8) -> result<_, libusb-error>;

        /// Release a previously claimed interface.
        /// This may perform a SET_INTERFACE to reset alt setting to 0.
        release-interface: func(ifac: u8) -> result<_, libusb-error>;

        /// Set the alternate setting for the specified interface (must be claimed first).
        set-interface-altsetting: func(ifac: u8, alt-setting: u8) -> result<_, libusb-error>;

        /// Clear the halt/stall condition on the given endpoint (endpoint number with direction bit).
        /// After this, the endpoint can be used again for transfers.
        clear-halt: func(endpoint: u8) -> result<_, libusb-error>;

        /// Perform a USB port reset on the device.
        /// If successful, the device will re-enumerate. The handle remains valid if the device can be re-opened.
        reset-device: func() -> result<_, libusb-error>;

        /// Allocate a USB 3 bulk stream
        /// This is used for bulk transfers with USB 3.0 devices.
        alloc-streams: func(num-streams: u32, endpoints: list<u8>) -> result<_, libusb-error>;

        /// Free a previously allocated USB 3 bulk stream
        /// This is used for bulk transfers with USB 3.0 devices.
        free-streams: func(endpoints: list<u8>) -> result<_, libusb-error>;

        /// Check if a kernel driver is active on the given interface.
        /// Returns: Ok(true) if a kernel driver is active, Ok(false) if not;
        /// LIBUSB_ERROR_NO_DEVICE if device is gone. This is optional.
        kernel-driver-active: func(ifac: u8) -> result<bool, libusb-error>;

        /// Detach the kernel driver from an interface, if one is active.
        /// After this, libusb can claim the interface. Optional; not all platforms support it.
        detach-kernel-driver: func(ifac: u8) -> result<_, libusb-error>;

        /// Re-attach the kernel driver to an interface. Optional.
        /// Should only be called if a driver was previously detached.
        attach-kernel-driver: func(ifac: u8) -> result<_, libusb-error>;

        /// Submit an asynchronous USB transfer on an open device handle.
        /// - `endpoint`: Endpoint address (with direction bit; e.g., 0x81 for IN endpoint 1).
        /// - `type`: Type of transfer (control, bulk, etc.). If `control`, the data should begin with the 8-byte setup packet.
        /// - `data`: The payload buffer for the transfer. For control OUT, this includes the setup packet and outgoing data; for control IN, include the setup packet and allocate space for response.
        /// - `timeout_ms`: Timeout for the transfer in milliseconds (0 for no timeout).
        /// On success, returns a Transfer handle representing the in-flight transfer. The actual completion (success or error) will be delivered via the event handling mechanism.
        new-transfer: func(xfer-type: transfer-type, setup: transfer-setup, buf-size: u32, opts: transfer-options) -> result<transfer, libusb-error>;

        /// Close an open device handle. After this, the handle is invalid.
        /// This will release any resources allocated for the handle.
        /// (No error is returned; if the device was already disconnected,
        /// the handle is simply closed.)
        close: func();
    }

    /// Initialize the libusb backend.
    /// This may set up internal data structures or threads.
    /// Corresponds to libusb_init().
    init: func() -> result<_, libusb-error>;

    /// Enumerate all USB devices on the system.
    /// Returns a list of usb-device objects representing each device.
    /// This corresponds to libusb_get_device_list().
    /// The returned devices are new references managed by the backend.
    list-devices: func() -> result<list<usb-device>, libusb-error>;
}